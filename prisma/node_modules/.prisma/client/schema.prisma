// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://foodtruck:foodie@localhost:5432"
}

model Comment {
  id          Int @default(autoincrement()) @id
  title       String
  content     String?
  published   Boolean @default(false)
  createdAt   DateTime @default(now())  @map(name: "created_at")
  author      TruckUser? @relation(fields: [authorId], references: [id])
  authorId    Int?
}

model TruckUser {
  id              Int       @default(autoincrement()) @id
  name            String?   
  email           String?   @unique
  emailVerified   DateTime? @map(name: "email_verified")
  image           String?
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  comments        Comment[]
  truckOwner      TruckOwner?  @relation("TruckOwner")

  @@map(name: "users")
}

model Truck{
  id            Int       @default(autoincrement()) @id
  name          String?
  description   String 
  ownerId       Int   
  truckOwner    TruckOwner @relation(fields: ownerId, references: id)
  latitude      Float?
  longitude     Float?
}

model TruckOwner {
  id          Int     @default(autoincrement()) @id
  user        TruckUser    @relation("TruckOwner", fields: [userId], references: id)
  userId      Int
  trucks      Truck[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}